// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  binaryTargets = ["native", "linux-musl"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ============================================
// User Model
// ============================================
model User {
  id                  String          @id @default(uuid()) @db.Uuid
  name                String          @db.VarChar(255)
  email               String          @unique @db.VarChar(255)
  password            String          @db.VarChar(255)
  address             String?         @db.Text
  profilePicture      String?         @db.VarChar(500)
  
  // Timestamps
  createdAt      DateTime        @default(now()) @db.Timestamptz(3)
  updatedAt      DateTime        @updatedAt @db.Timestamptz(3)
  
  // Relationships
  bankingDetails BankingDetails?

  @@map("users")
  @@index([email])
}

// ============================================
// Banking Details Model
// ============================================
model BankingDetails {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  agency        String   @db.VarChar(10)
  accountNumber String   @db.VarChar(20)
  
  // Balance (Saldo)
  balance       Decimal  @default(0.00) @db.Decimal(15, 2) // Saldo da conta
  
  // Timestamps
  createdAt     DateTime @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime @updatedAt @db.Timestamptz(3)
  
  // Relationships
  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("banking_details")
  @@index([userId])
  @@index([balance]) // Índice para consultas de saldo
}

// ============================================
// Transaction History Model (para auditoria de saldo)
// ============================================
model BalanceHistory {
  id              String   @id @default(uuid()) @db.Uuid
  userId          String   @db.Uuid
  transactionId   String?  @db.Uuid // ID da transação que causou a mudança
  
  // Balance Changes
  previousBalance Decimal  @db.Decimal(15, 2)
  newBalance      Decimal  @db.Decimal(15, 2)
  amount          Decimal  @db.Decimal(15, 2) // Valor da mudança (+ ou -)
  
  // Type
  type            BalanceOperationType
  description     String?  @db.Text
  
  // Timestamps
  createdAt       DateTime @default(now()) @db.Timestamptz(3)

  @@map("balance_history")
  @@index([userId])
  @@index([transactionId])
  @@index([createdAt(sort: Desc)])
}

// ============================================
// Enums
// ============================================

enum BalanceOperationType {
  CREDIT        // Crédito (recebimento)
  DEBIT         // Débito (envio)
  ADJUSTMENT    // Ajuste manual
  INITIAL       // Saldo inicial

  @@map("balance_operation_type")
}
