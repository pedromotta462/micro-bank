services:
  # PostgreSQL Database - Transactions Service
  postgres-transactions:
    image: postgres:16-alpine
    container_name: micro-bank-postgres-transactions
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=transactions_db
      - POSTGRES_USER=transactions_user
      - POSTGRES_PASSWORD=transactions_pass
    volumes:
      - postgres-transactions-data:/var/lib/postgresql/data
    networks:
      - micro-bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U transactions_user -d transactions_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # PostgreSQL Database - Users Service
  postgres-users:
    image: postgres:16-alpine
    container_name: micro-bank-postgres-users
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      - POSTGRES_DB=users_db
      - POSTGRES_USER=users_user
      - POSTGRES_PASSWORD=users_pass
    volumes:
      - postgres-users-data:/var/lib/postgresql/data
    networks:
      - micro-bank-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U users_user -d users_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: micro-bank-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - micro-bank-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: micro-bank-rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"     # AMQP protocol
      - "15672:15672"   # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    networks:
      - micro-bank-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: apps/api-gateway/Dockerfile
    container_name: micro-bank-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3000
      - APP_NAME=api-gateway
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - CORS_ENABLED=${CORS_ENABLED:-true}
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - RATE_LIMIT_TTL=${RATE_LIMIT_TTL:-60}
      - RATE_LIMIT_MAX=${RATE_LIMIT_MAX:-100}
      - TRANSACTIONS_SERVICE_URL=http://transactions-service:3001
      - USERS_SERVICE_URL=http://users-service:3002
    networks:
      - micro-bank-network
    depends_on:
      transactions-service:
        condition: service_healthy
      users-service:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Transactions Service
  transactions-service:
    build:
      context: .
      dockerfile: apps/transactions-service/Dockerfile
    container_name: micro-bank-transactions-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3001
      - APP_NAME=transactions-service
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_HOST=postgres-transactions
      - DATABASE_PORT=5432
      - DATABASE_NAME=transactions_db
      - DATABASE_USER=transactions_user
      - DATABASE_PASSWORD=transactions_pass
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=transactions
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - micro-bank-network
    depends_on:
      postgres-transactions:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Users Service
  users-service:
    build:
      context: .
      dockerfile: apps/users-service/Dockerfile
    container_name: micro-bank-users-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=${NODE_ENV:-production}
      - PORT=3002
      - APP_NAME=users-service
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - DATABASE_HOST=postgres-users
      - DATABASE_PORT=5432
      - DATABASE_NAME=users_db
      - DATABASE_USER=users_user
      - DATABASE_PASSWORD=users_pass
      - JWT_SECRET=${JWT_SECRET:-change-me-in-production}
      - JWT_EXPIRES_IN=7d
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=users
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    networks:
      - micro-bank-network
    depends_on:
      postgres-users:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3002/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

  # Notifications Service
  notifications-service:
    build:
      context: .
      dockerfile: apps/notifications-service/Dockerfile
    container_name: micro-bank-notifications-service
    ports:
      - "3003:3003"
    networks:
      - micro-bank-network
    environment:
      - NODE_ENV=development
      - PORT=3003
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
      - RABBITMQ_QUEUE=notifications_queue
    depends_on:
      rabbitmq:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "node", "-e", "console.log('Health check')"]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 10s

volumes:
  postgres-transactions-data:
    name: micro-bank-postgres-transactions-data
  postgres-users-data:
    name: micro-bank-postgres-users-data
  redis-data:
    name: micro-bank-redis-data
  rabbitmq-data:
    name: micro-bank-rabbitmq-data

networks:
  micro-bank-network:
    driver: bridge
    name: micro-bank-network
